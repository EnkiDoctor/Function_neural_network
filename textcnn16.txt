import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
from torch.autograd import Variable
import torch
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision import transforms
from torch import nn,optim
from torch.nn import functional as F 
from torch.utils.data import Dataset,DataLoader,TensorDataset
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

traindata = pd.read_csv("newresult.csv")
trainlabel = pd.read_csv("newlabel.csv")
traindata = traindata.drop(['Unnamed: 0'],axis = 1).values
trainlabel = trainlabel['func'].values

X_train, X_test, Y_train, Y_test = train_test_split(traindata, trainlabel, test_size = 0.2, random_state = 1)
X_train, Y_train = torch.FloatTensor(X_train), torch.FloatTensor(Y_train)
X_test, Y_test = torch.FloatTensor(X_test), torch.FloatTensor(Y_test)

batchsize = 32
train_dataset = torch.utils.data.TensorDataset(X_train, Y_train)
test_dataset = torch.utils.data.TensorDataset(X_test, Y_test)

#dataloader 
train_loader = torch.utils.data.DataLoader(dataset = train_dataset, batch_size = batchsize, shuffle = True)
test_loader = torch.utils.data.DataLoader(dataset = test_dataset, batch_size = batchsize, shuffle = False)

class CNN_16d(nn.Module):
    def __init__(self):
        super(CNN_16d,self).__init__()
        self.conv1 = nn.Conv1d(1, 2, 2, padding=0, stride=2)
        #self.pool1 = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv1d(2, 4, 2, stride=2)
        self.conv3 = nn.Conv1d(4, 6, 2, stride=2)
        self.conv4 = nn.Conv1d(6, 3, 2, stride=2)
        self.flat = nn.Flatten()
        self.fc1 = nn.Linear(3, 60)
        self.fc2 = nn.Linear(60, 20)
        self.fc3 = nn.Linear(20, 1)
    
    def forward(self,x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.conv3(x)
        x = self.conv4(x)  
        x = self.flat(x)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = CNN_16d()
if torch.cuda.is_available():
    print("gpu_available")
    model.cuda()


optimizer = optim.Adam(model.parameters(), lr =0.001)
criteon= nn.MSELoss()
EPOCH = 20
loss_list = []
for epoch in range(EPOCH):
    model.train()
    sum_loss = 0 
    for batch_idx, (data, target) in enumerate(train_loader):
        if torch.cuda.is_available():
            data, target = data.cuda(), target.cuda()
        #data, target = Variable(data), Variable(target)

        data = torch.reshape(data,(batchsize, 1, 16))
        target = torch.reshape(target, (batchsize, 1))
        optimizer.zero_grad()
        
        
        data=data.to(torch.float32)
        target=target.to(torch.float32)
        output = model(data)

        
        #print(data)
        #print(target)
        #print("The output is:")
        #print(output)
        
        loss = criteon(output, target)
        loss.backward()
        optimizer.step()

        sum_loss += loss.item()
        if batch_idx % 10 == 0:
            print("train epoch {} loss : {:.3f}".format(epoch, sum_loss/100))
            loss_list.append(sum_loss/100)
            sum_loss = 0         


model = model.cpu()
testing = pd.DataFrame(X_test)
re = model(torch.Tensor(X_test.reshape(2000,1,16))).detach().numpy()
re = re.reshape(2000)
true = Y_test.numpy()
dataframe = pd.DataFrame([re, true]).T
dataframe.columns = ['pred','truth']
dataframe['error'] = np.abs(dataframe['pred'] - dataframe['truth'])
dataframe['percentage'] = dataframe['error']/np.abs(dataframe['truth'])